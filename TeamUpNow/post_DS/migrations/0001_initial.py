# Generated by Django 4.0.7 on 2023-04-12 16:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import post_DS.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post_DS',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('posted', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('task_choice', models.CharField(blank=True, choices=[('GENERAL TASK', 'GENERAL TASK'), ('SPECIFIC TASK', 'SPECIFIC TASK')], max_length=300, null=True)),
                ('project_choice', models.CharField(blank=True, choices=[('SPECIFIC PROJECT', 'SPECIFIC PROJECT'), ('GRENERAL PROJECT', 'GRENERAL PROJECT')], max_length=300, null=True)),
                ('examine_types', models.CharField(blank=True, choices=[('CODING', 'CODING'), ('ORAL', 'ORAL'), ('CODING & ORAL', 'CODING & ORAL')], max_length=300, null=True)),
                ('task_method', models.CharField(blank=True, choices=[('LIVE INTERVIEW', 'LIVE INTERVIEW'), ('HOME ASSIGNMENT', 'HOME ASSIGNMENT'), ('LIVE & HOME ASSIGNMENT', 'LIVE & HOME ASSIGNMENT')], max_length=300, null=True)),
                ('task_completion', models.CharField(blank=True, choices=[('PAIR PROGRAMMING', 'PAIR PROGRAMMING'), ('INDIVIDUAL PROGRAMMING', 'INDIVIDUAL PROGRAMMING')], max_length=300, null=True)),
                ('sdls_phase', models.CharField(blank=True, choices=[('Planning', 'Planning'), ('Defining', 'Defining'), ('Designing', 'Designing'), ('Building', 'Building'), ('Testing', 'Testing'), ('Deployment', 'Deployment')], max_length=300, null=True)),
                ('evaluation_duration', models.CharField(blank=True, choices=[('1 day', '1 day'), ('2 days', '2 days'), ('3 days', '3 days'), ('4 days', '4 days'), ('5 days', '5 days'), ('6 days', '6 days'), ('1 week', '1 week'), ('1-2 weeks', '1-2 weeks'), ('2-3 weeks', '2-3 weeks')], max_length=300, null=True)),
                ('clean_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('clean_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Clean')),
                ('refactored_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('refactored_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Refactored')),
                ('well_documented_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('well_documented_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='well documented')),
                ('unit_tested_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('unit_tested_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Unit Tested')),
                ('debuged_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('debuged_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Debuged')),
                ('debuged_with_other_team_members_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('debuged_with_other_team_members_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Debuged with other team members')),
                ('debuged_other_team_members_bugs_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('debuged_other_team_members_bugs_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Debuged other team members bugs')),
                ('analyzed_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('analyzed_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Analyzed')),
                ('analyzed_with_other_team_members_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('analyzed_with_other_team_members_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Analyzed with other team members')),
                ('analyzed_other_team_members_script_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('analyzed_other_team_members_script_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Analyzed other team members script')),
                ('discussed_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('discussed_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Discussed')),
                ('discussed_with_other_team_members_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('discussed_with_other_team_members_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Discussed with other team members')),
                ('expected_problems_are_reasoned_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('expected_problems_are_reasoned_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Expected problems are reasoned')),
                ('arbitrary_problems_are_reasoned_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('arbitrary_problems_are_reasoned_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Arbitrary problems are reasoned')),
                ('expected_constraints_are_reasoned_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('expected_constraints_are_reasoned_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Expected constraints are reasoned')),
                ('arbitrary_constraints_are_reasoned_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('arbitrary_constraints_are_reasoned_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Arbitrary constraints are reasoned')),
                ('designed_with_one_approach_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('designed_with_one_approach_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Designed with one approach')),
                ('designed_with_multiple_possible_approaches_SCORE', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('designed_with_multiple_possible_approaches_NOTE', models.TextField(blank=True, max_length=200, null=True, verbose_name='Designed with multiple possible approaches')),
                ('likes', models.IntegerField(default=0)),
                ('conciseness', models.IntegerField(default=0)),
                ('relevancy', models.IntegerField(default=0)),
                ('attendees_evaluated', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attendees_DS', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_DS_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag_DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=75, verbose_name='Tag_DS')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Stream_DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('following', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stream_following_DS', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='post_DS.post_ds')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stream_user_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PostFileContent_DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=post_DS.models.user_directory_path)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_owner_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Likes_DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_like_DS', to='post_DS.post_ds')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_like_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Follow_DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follower_DS', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='following_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Experience_chart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('technical_task', models.CharField(blank=True, max_length=300, null=True)),
                ('technical_ocuppation', models.CharField(blank=True, max_length=300, null=True)),
                ('week_number', models.CharField(blank=True, max_length=2)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('finish_date', models.DateField(default=django.utils.timezone.now)),
                ('posted', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience_chart_DS', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
